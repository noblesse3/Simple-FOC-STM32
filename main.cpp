#include "main.h"

// Include paths for the SimpleFOC components
#include "SimpleFOC/src/common/foc_utils.h"               // Utilities for Field Oriented Control (FOC)
#include "SimpleFOC/src/common/time_utils.h"              // Timing utilities for delays and timestamps
          	  	  	  	  	  	  	  	  	  	  	  	  // PID Controller for velocity and position control

#include "SimpleFOC/src/drivers/BLDCDriver3PWM.h"         // Driver for 3-phase PWM control
#include "SimpleFOC/src/sensors/HallSensor.h"             // Hall sensor for position feedback

#include "SimpleFOC/src/current_sense/GenericCurrentSense.h" // Optional: current sensing (if applicable)

// Declare external handles for peripherals generated by CubeMX
extern TIM_HandleTypeDef htim1;   // Timer used for PWM (example: TIM1)
extern UART_HandleTypeDef huart1; // UART for debugging (example: UART1)

// Pin definitions for Hall sensors (as configured in CubeMX)
#define HALL_A_PORT GPIOA
#define HALL_A_PIN GPIO_PIN_1
#define HALL_B_PORT GPIOB
#define HALL_B_PIN GPIO_PIN_2
#define HALL_C_PORT GPIOC
#define HALL_C_PIN GPIO_PIN_3

// Define objects for Hall sensor, motor driver, and BLDC motor
HallSensor sensor(HALL_A_PORT, HALL_A_PIN, HALL_B_PORT, HALL_B_PIN, HALL_C_PORT, HALL_C_PIN, 42); // 42: CPR (Counts Per Revolution)
BLDCDriver3PWM driver(&htim1, TIM_CHANNEL_1, TIM_CHANNEL_2, TIM_CHANNEL_3, GPIO_PIN_10); // PWM pins + optional enable pin
BLDCMotor motor(7);  // 7 pole pairs (update based on your motor)

// Debug function to print messages via UART
void debugPrint(const char* message) {
    HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
}

// Function to initialize the motor and peripherals
void setup() {
    // Initialize the Hall sensor
    sensor.init();

    // Link the sensor and driver to the motor
    motor.linkDriver(&driver);
    motor.linkSensor(&sensor);

    // Configure motor parameters
    motor.voltage_power_supply = 12.0;  // Voltage supply for the motor (e.g., 12V)
    motor.controller = MotionControlType::velocity;  // Default control mode: velocity
    motor.init();

    // Debug message
    debugPrint("Setup complete\n");
}

// Main loop: applies control commands and displays feedback
void loop() {
    // Read sensor data
    float angle = sensor.getAngle();      // Current rotor angle (radians)
    float velocity = sensor.getVelocity(); // Current rotor velocity (rad/s)

    // Command the motor to run at a constant velocity (e.g., 2 rad/s)
    motor.move(2.0);

    // Debug output: print angle and velocity
    char buffer[100];
    snprintf(buffer, sizeof(buffer), "Angle: %.2f rad, Velocity: %.2f rad/s\n", angle, velocity); // @suppress("Float formatting support")
    debugPrint(buffer);

    // Delay to control the loop rate
    HAL_Delay(100);  // 100 ms delay
}

// Main function for STM32
int main(void) {
    // HAL initialization and system configuration
    HAL_Init();               // Initialize the HAL library
    SystemClock_Config();     // Configure the system clock (defined in main.c)
    MX_GPIO_Init();           // Initialize GPIOs (generated by CubeMX)
    MX_TIM1_Init();           // Initialize Timer 1 for PWM (generated by CubeMX)
    MX_USART1_UART_Init();    // Initialize UART1 for debugging (generated by CubeMX)

    // Call setup to initialize user components
    setup();

    // Infinite loop
    while (1) {
        loop();  // Call the loop function repeatedly
    }
}
